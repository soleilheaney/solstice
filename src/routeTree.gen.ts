/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from "@tanstack/react-start/server";

import { Route as rootRouteImport } from "./routes/__root";
import { Route as OnboardingRouteRouteImport } from "./routes/onboarding/route";
import { Route as DashboardRouteRouteImport } from "./routes/dashboard/route";
import { Route as AuthRouteRouteImport } from "./routes/auth/route";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as OnboardingIndexRouteImport } from "./routes/onboarding/index";
import { Route as DashboardIndexRouteImport } from "./routes/dashboard/index";
import { Route as DashboardMembershipRouteImport } from "./routes/dashboard/membership";
import { Route as AuthSignupRouteImport } from "./routes/auth/signup";
import { Route as AuthLoginRouteImport } from "./routes/auth/login";
import { Route as ApiHealthRouteImport } from "./routes/api/health";
import { ServerRoute as ApiAuthSplatServerRouteImport } from "./routes/api/auth/$";
import { ServerRoute as ApiAuthActionProviderServerRouteImport } from "./routes/api/auth/$action/$provider";

const rootServerRouteImport = createServerRootRoute();

const OnboardingRouteRoute = OnboardingRouteRouteImport.update({
  id: "/onboarding",
  path: "/onboarding",
  getParentRoute: () => rootRouteImport,
} as any);
const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: "/dashboard",
  path: "/dashboard",
  getParentRoute: () => rootRouteImport,
} as any);
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: "/auth",
  path: "/auth",
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);
const OnboardingIndexRoute = OnboardingIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => OnboardingRouteRoute,
} as any);
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => DashboardRouteRoute,
} as any);
const DashboardMembershipRoute = DashboardMembershipRouteImport.update({
  id: "/membership",
  path: "/membership",
  getParentRoute: () => DashboardRouteRoute,
} as any);
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: "/signup",
  path: "/signup",
  getParentRoute: () => AuthRouteRoute,
} as any);
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => AuthRouteRoute,
} as any);
const ApiHealthRoute = ApiHealthRouteImport.update({
  id: "/api/health",
  path: "/api/health",
  getParentRoute: () => rootRouteImport,
} as any);
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: "/api/auth/$",
  path: "/api/auth/$",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiAuthActionProviderServerRoute =
  ApiAuthActionProviderServerRouteImport.update({
    id: "/api/auth/$action/$provider",
    path: "/api/auth/$action/$provider",
    getParentRoute: () => rootServerRouteImport,
  } as any);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/auth": typeof AuthRouteRouteWithChildren;
  "/dashboard": typeof DashboardRouteRouteWithChildren;
  "/onboarding": typeof OnboardingRouteRouteWithChildren;
  "/api/health": typeof ApiHealthRoute;
  "/auth/login": typeof AuthLoginRoute;
  "/auth/signup": typeof AuthSignupRoute;
  "/dashboard/membership": typeof DashboardMembershipRoute;
  "/dashboard/": typeof DashboardIndexRoute;
  "/onboarding/": typeof OnboardingIndexRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/auth": typeof AuthRouteRouteWithChildren;
  "/api/health": typeof ApiHealthRoute;
  "/auth/login": typeof AuthLoginRoute;
  "/auth/signup": typeof AuthSignupRoute;
  "/dashboard/membership": typeof DashboardMembershipRoute;
  "/dashboard": typeof DashboardIndexRoute;
  "/onboarding": typeof OnboardingIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/auth": typeof AuthRouteRouteWithChildren;
  "/dashboard": typeof DashboardRouteRouteWithChildren;
  "/onboarding": typeof OnboardingRouteRouteWithChildren;
  "/api/health": typeof ApiHealthRoute;
  "/auth/login": typeof AuthLoginRoute;
  "/auth/signup": typeof AuthSignupRoute;
  "/dashboard/membership": typeof DashboardMembershipRoute;
  "/dashboard/": typeof DashboardIndexRoute;
  "/onboarding/": typeof OnboardingIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/auth"
    | "/dashboard"
    | "/onboarding"
    | "/api/health"
    | "/auth/login"
    | "/auth/signup"
    | "/dashboard/membership"
    | "/dashboard/"
    | "/onboarding/";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/auth"
    | "/api/health"
    | "/auth/login"
    | "/auth/signup"
    | "/dashboard/membership"
    | "/dashboard"
    | "/onboarding";
  id:
    | "__root__"
    | "/"
    | "/auth"
    | "/dashboard"
    | "/onboarding"
    | "/api/health"
    | "/auth/login"
    | "/auth/signup"
    | "/dashboard/membership"
    | "/dashboard/"
    | "/onboarding/";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AuthRouteRoute: typeof AuthRouteRouteWithChildren;
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren;
  OnboardingRouteRoute: typeof OnboardingRouteRouteWithChildren;
  ApiHealthRoute: typeof ApiHealthRoute;
}
export interface FileServerRoutesByFullPath {
  "/api/auth/$": typeof ApiAuthSplatServerRoute;
  "/api/auth/$action/$provider": typeof ApiAuthActionProviderServerRoute;
}
export interface FileServerRoutesByTo {
  "/api/auth/$": typeof ApiAuthSplatServerRoute;
  "/api/auth/$action/$provider": typeof ApiAuthActionProviderServerRoute;
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport;
  "/api/auth/$": typeof ApiAuthSplatServerRoute;
  "/api/auth/$action/$provider": typeof ApiAuthActionProviderServerRoute;
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath;
  fullPaths: "/api/auth/$" | "/api/auth/$action/$provider";
  fileServerRoutesByTo: FileServerRoutesByTo;
  to: "/api/auth/$" | "/api/auth/$action/$provider";
  id: "__root__" | "/api/auth/$" | "/api/auth/$action/$provider";
  fileServerRoutesById: FileServerRoutesById;
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute;
  ApiAuthActionProviderServerRoute: typeof ApiAuthActionProviderServerRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/onboarding": {
      id: "/onboarding";
      path: "/onboarding";
      fullPath: "/onboarding";
      preLoaderRoute: typeof OnboardingRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/dashboard": {
      id: "/dashboard";
      path: "/dashboard";
      fullPath: "/dashboard";
      preLoaderRoute: typeof DashboardRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/auth": {
      id: "/auth";
      path: "/auth";
      fullPath: "/auth";
      preLoaderRoute: typeof AuthRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/onboarding/": {
      id: "/onboarding/";
      path: "/";
      fullPath: "/onboarding/";
      preLoaderRoute: typeof OnboardingIndexRouteImport;
      parentRoute: typeof OnboardingRouteRoute;
    };
    "/dashboard/": {
      id: "/dashboard/";
      path: "/";
      fullPath: "/dashboard/";
      preLoaderRoute: typeof DashboardIndexRouteImport;
      parentRoute: typeof DashboardRouteRoute;
    };
    "/dashboard/membership": {
      id: "/dashboard/membership";
      path: "/membership";
      fullPath: "/dashboard/membership";
      preLoaderRoute: typeof DashboardMembershipRouteImport;
      parentRoute: typeof DashboardRouteRoute;
    };
    "/auth/signup": {
      id: "/auth/signup";
      path: "/signup";
      fullPath: "/auth/signup";
      preLoaderRoute: typeof AuthSignupRouteImport;
      parentRoute: typeof AuthRouteRoute;
    };
    "/auth/login": {
      id: "/auth/login";
      path: "/login";
      fullPath: "/auth/login";
      preLoaderRoute: typeof AuthLoginRouteImport;
      parentRoute: typeof AuthRouteRoute;
    };
    "/api/health": {
      id: "/api/health";
      path: "/api/health";
      fullPath: "/api/health";
      preLoaderRoute: typeof ApiHealthRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}
declare module "@tanstack/react-start/server" {
  interface ServerFileRoutesByPath {
    "/api/auth/$": {
      id: "/api/auth/$";
      path: "/api/auth/$";
      fullPath: "/api/auth/$";
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/auth/$action/$provider": {
      id: "/api/auth/$action/$provider";
      path: "/api/auth/$action/$provider";
      fullPath: "/api/auth/$action/$provider";
      preLoaderRoute: typeof ApiAuthActionProviderServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
  }
}

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute;
  AuthSignupRoute: typeof AuthSignupRoute;
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthSignupRoute: AuthSignupRoute,
};

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
);

interface DashboardRouteRouteChildren {
  DashboardMembershipRoute: typeof DashboardMembershipRoute;
  DashboardIndexRoute: typeof DashboardIndexRoute;
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardMembershipRoute: DashboardMembershipRoute,
  DashboardIndexRoute: DashboardIndexRoute,
};

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
);

interface OnboardingRouteRouteChildren {
  OnboardingIndexRoute: typeof OnboardingIndexRoute;
}

const OnboardingRouteRouteChildren: OnboardingRouteRouteChildren = {
  OnboardingIndexRoute: OnboardingIndexRoute,
};

const OnboardingRouteRouteWithChildren = OnboardingRouteRoute._addFileChildren(
  OnboardingRouteRouteChildren,
);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  OnboardingRouteRoute: OnboardingRouteRouteWithChildren,
  ApiHealthRoute: ApiHealthRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiAuthActionProviderServerRoute: ApiAuthActionProviderServerRoute,
};
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>();
